用户点击时，首选判断页面的状态
*声明一个全局变量，代表用户最后点击的是哪个表格。
状态1 ： 还没有一个表格展开 
   ～在这个状态下，点击后立刻展开表格，然后实现该一系列信息。
   
状态2 ： 有表格展开
   ～在这个状态下，判断点击的表格是否与变量最后点击的表格一致。
      ～～如果是
         #判断该表格的大小
            + 如果表格小于260px
                调用展开表格的方法
            + 如果表格大于260px
               调用缩小表格的方法

      ～～如果不是
         #展开点击了的这个表，并循环让其它所有表都是缩小大小的（缩小这不用动画效果，只需展开即可）
         #还有展示或影藏对应的信息
     
方法结尾：
   把点击的表格名赋值给最后点击的那个全局变量。


***********************************************************************************************************************************

$声明一个用来待命的数据仓库
$声明一个变量用来表示表格是否与展开状态。1 是闭合 、 2 是展开
$声明一个数字变量来代表点击了几个餐。
用户点击一个餐时｛

   * 获取该餐名与价格，然后按下面格式储存到待命的数据仓库里：
      + 索引 、餐数量（默认1）、餐名 、餐价 、备注（例如餐要少盐）。

   * 调用一次刷新右边显示点了的餐。
｝

 $打开数据库

显示点了的餐的函数｛
   * 判断表格是否展开｛
      +如果不是:
         - 调用展开表格的方法。
         - 把变量改成展开状态（2） 
      ｝

   * 首先让表格为空（为了避免下面循环出数据后重叠）inerhtml = “”；

   // 注意这里不用curse 的方式批量获取数据
   * 如果成功打开数据库｛
      + for循环，以记录点击了几次的变量为判断条件｛
         - 展示表格之前，先用一个变量代替价格，如下计算：获取餐量 X 餐价
         - 以一下格式展现表格：
            ¥ 输入框代表餐的数量（默认1 、 监视onclick = 带参函数）、 餐名 、 餐价变量（上面有）、 删除点击了那个餐的按钮（调用删除的函数-（onclick function 里的参数指定哪一条）） , 备注输入按钮  
      ｝
   ｝
｝

｝

展开右边表格的函数｛

｝

监视点击餐数量框事件的函数（接收参数定位近视哪一条）｛
   *调用一个setinterval（监视框内值更换了多少，然后修改价格的函数）
｝

监视框内新值与修改价格函数｛
   $ 获取当前框内的值
   $ 获取数据库里框里该有的值
   * 首先判断餐量的值如果不等于数据库里的话就｛
      + 打开数据库把原有的餐量值替换成当下框内的。
      + 调用一次点了的餐的函数，来刷新一下价格
      + 结束setInterval     
   ｝
｝

删除表格里的一个餐的函数｛
   *  
｝


******************************************************************************************

发送菜单功能

*储存数据到仓库的格式

餐的排序号、同一个餐的数量、餐名、餐价、备注




* 提示是否要添加时，表格收缩的bug -------
* 做一张桌已经有餐时，再添加餐的功能
* 添加外卖选项的功能 


******************************************************************************************

$首先给每一个餐桌号和外卖号做一个键值对，其值代表该号有没有被显示，
如何有的话，之后的每秒循环就可以略过他。

$打开数据库

* 点击按钮进入mesa页面的函数｛
    + 把localstore 里所有餐桌对应的值都设计成FALSE，
    这是因为初进页面还什么都没有显示
    + 调用每秒执行函数。
｝

* 点击进carta页面按钮的函数｛
    + 终止每秒执行的函数。
｝

* 每秒执行函数｛
   + 循环所有桌号，若参数是true便省略，若是FALSE便用桌号为参数运行“打开数据库函数”。
   + 循环所有打包的号，之后与上同理。
｝

* 打开数据库函数（参数） ｛
    + 以参数为仓库名获取数据库中的一个值，若返回undefined，
    代表仓库为空，什么都不用做。若真的返回值，且调用“显示函数”。
｝

*显示函数｛

   + 获取数据仓库的该行的所需数据，且用不同变量接收。
   + 用以下格式显示内容：
      - 《格式》
   + 把该数据仓库在localstore对应的值改成TRUE。

｝

*格式
- 大厅 ： 餐桌号、餐名、餐量 、查看价格按钮  

- 收银台 ：餐桌号、餐名、餐量 、查看价格按钮 、收钱按钮、修改按钮
（数据库里每一个餐都有一个是否已经煮了的参数，如果煮了还要删除一个餐，需要老板提供密码）

- 厨房 ：餐桌号、以勾选框的方式显示每一行（餐量，餐名，备注，entrada如果是便宜餐）、
按钮表示该单的餐都出了。


mesa01-p1-cantidad
mesa01-p1-nombre
mesa01-p1-precio
mesa01-p1-detalle
mesa01-p1-entrada

llev01-p1-cantidad
llev01-p1-nombre
llev01-p1-precio
llev01-p1-detalle
llev01-p1-entrada
llev01-p1-envase
----------------------------------------------------------------------

支付功能！！

$生明一个数组，用来接收需要收钱的单中的每一个餐的价格。

收钱函数（桌子号或者打包号为参数）｛

      * 以传进来的餐桌号为参数打开数据库。
      * 以curse 的方式遍历出数据库里该单中每一个餐的价格，然后存进上面数组里（如果最后一个价钱会重复，接下来相加时减去即可）

      $声明一个变量，用来接收循环计算总价格的每一次循环结果

      * 用for循环，让数组里的价格相加，别忘了确认数组最后一个值有没有重复。

      $把总价格附值给一个全局变量

      * 显示交钱弹窗（内容：显示总价格 、用多少钱找的输入框、勾选框如果是刷卡、otro的勾选框如果点击便展示一个输入框输入具体的输入方式、如果是现金支付的话，提示要找多少钱、确定按钮 、取消退出窗口的按钮）        
｝

$声明一个变量用来后期赋值用户最终决定要以哪个方式支付

用多少钱找输入框的函数（参数是总价格）{

   * 用setinterval（用变量接收一下这个setinterval，方便后面停止它）｛

      - 一直监视输入框的值且用变量接收
      - 用if判断如果输入框的值大于总价格时，进行减除后把要找多少钱的提示显示出来
｝ 
   * 给支付方式的变量赋值“efectivo”
}

银行卡支付勾选框函数｛

   * 给支付方式赋值“tarjeta”
｝

yape 支付勾选框函数｛

   * 给支付方式赋值 “yape”
｝

plin 支付勾选框函数｛

   * 给支付方式赋值“plin”
｝

$声明一个变量用来接收下面输入框内容
otro的选项函数｛

   * 弹出一个输入框让用户输入具体的支付方式，例如一半银行卡支付，一半现金等。
   * 给支付方式赋值 otro
   * 获取输入框内的内容赋值给变量接收

｝

确定按钮函数（餐桌号为参数）{

   * 删除该数据仓库的内容
   * 把它在localstore对应的值改回未显示的状态。
   * 把上面一些用来传参的变量值都改回默认的状态
   * 隐藏弹窗
   * 停止setinterval
   * 清空所有输入框
   * 清空勾选框
   * 把该单的所有信息都添加进收入记录的厂库里（包括时间日期）
    
}

取消退出按钮的函数｛

   * 删除数组里的内容（储存单中每一个餐价格那个）
   * 删除全局变量关于最终需要支付总价格那个。
   * 隐藏弹窗
   * 把所有有可能修改过的参数都恢复默认状态。
｝

实现代码

// 该变量接收支付框，方便后期显示或隐藏的操作
let cuadra_de_pago = document.getElementById("")

//点击收钱时执行的函数参数是桌号或者外卖号, MorL 传的值是mesa01 或者 llev01
function pagar(MLnumber , MorL ){

//该变量接收客户需要支付的总价格，初始值为零
let precios_a_cobrar = 0 ;
 
// 该变量接收该桌号或者外卖号的长度，也就是有几个餐
let pedidos_long = localstorange.getItem(MLnumber);

// 通过循环，把单中所有餐价存放到上面数组里
for(i = 0 ; i <= pedidos_long ; i ++ ){

// 该变量接收，组装好的要获取其值的建
let construtorQ = MorL + "-" + "p" + i +  "-precio" ;

// 该变量接收每一次循环获取到的价格
let obt_ = localstorange.getItem(constructorQ);

precios_a_ = parseInt(precios_a_cobrar) + parseInt(obt_Tprecio);
}

*显示支付框

// 把总价格赋值到支付框，显示出来
document.getElementById("precio_total").innertHTML = precios_a_cobrar ;

}

支付框
<div id="cuadro_pago">

<h2>seleccionar el medio de pago</h2>

<div class="pago_cuerpo">
<div class="p_part1">
<h4>total apagar :</h4>
<h5 id="precio_total"></h5>
</div>

<div class="p_part2">
<p>efectivo</p >
<input  id="pagoNum" )type="number" placeholder="ingresa con cuanto cancela" onclick="vuelto()" />
<p id="vuelto" style="color:red;"></p >
</div>

<input type="checkbox"/>tarjeta

<div class="p_part3">
<input type="checkbox"/>otro
<input id="espc_pago" type="text" placeholder="Especifica el medio de pago" />
</div>

<button onclick="pagar()">pagar</button>

</div>
</div>

（js）

// 该变量用来接收最终客户用什么方式买单，支付完后储存到数据库中
let medio_pago_seleccionado ;

// 该函数的作用是监视客户输入用多少钱支付，从而计算出找多少钱。
function vuelto( ){

//获取总价格
let precio_a_cobrar = document.getElementById("precio_total").innertHTML ;

// 停止监视显示单的setinterval ，应为两个setinterval无法正常一起运行
cleanInterval(cambio);

//启动新的setinterval监视客户输入用多少钱支付
setInterval(function(){

//获取用户输入了用多少钱现金支付
 let vuelto_de = document.getElementById("pagoNum").value;

// 判断上面用输入的支付金额是否大于需要支付的总价格。
if(vuelto_de>precio_a_cobrar){

// 如果大于，那么就计算要找多少钱，然后显示给用户。
let vuelto =vuelto_de -  precio_a_cobrar ;

document.getElementById("vuelto").innertHTML = vuelto;
}
} ,500)

// 赋值该变量代表用户是用现金支付
medio_pago_seleccionado = "efectivo";
}


支付函数
function pagar(){

// 判断是否是现金支付，从而恢复setinterval的正常运行
if(medio_pago_seleccionado == "efectivo"){

cleanInterval()

}

}

、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、

规格
* 日期
* 时间
* 单号 例如 #M0000001  代表堂吃的单， #L0000001 外卖的单
* 该单的总价格